
import os
from wqet_grader.transport import encode_value, decode_value, encode_submission, decode_submission
import pandas as pd
from category_encoders import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_absolute_error

my_dir = os.path.dirname(os.path.abspath(__file__))

def check_sklearn_model(value):
  X_test = pd.read_csv(my_dir + "/fixtures/mexico-real-estate-test.csv")
  y_test = pd.read_csv(my_dir + "/fixtures/mexico-real-estate-test-labels.csv")
  y_pred = value.predict(X_test)
  assert mean_absolute_error(y_pred, y_test).round(2) == 399346.54

def test_json_encoding():
  value = 3.14
  assert decode_value(encode_value(value)) == value
  value = [1, 2, 3]
  assert decode_value(encode_value(value)) == value
  value = "testo"
  assert decode_value(encode_value(value)) == value
  value = {"one": "two"}
  assert decode_value(encode_value(value)) == value

def test_dataframe_encoding():
  value = pd.read_csv(my_dir + "/fixtures/mexico-real-estate-train-sample.csv")
  encoded_value = encode_value(value, 'pandas_dataframe')
  assert encoded_value['format'] == 'pickle'
  assert encoded_value['data'] == 'gAWVNQQAAAAAAACMEXBhbmRhcy5jb3JlLmZyYW1llIwJRGF0YUZyYW1llJOUKYGUfZQojARfbWdylIwecGFuZGFzLmNvcmUuaW50ZXJuYWxzLm1hbmFnZXJzlIwMQmxvY2tNYW5hZ2VylJOUjAlmdW5jdG9vbHOUjAdwYXJ0aWFslJOUjBxwYW5kYXMuY29yZS5pbnRlcm5hbHMuYmxvY2tzlIwJbmV3X2Jsb2NrlJOUhZRSlChoDil9lIwEbmRpbZRLAnNOdJRijBJudW1weS5jb3JlLm51bWVyaWOUjAtfZnJvbWJ1ZmZlcpSTlCiWoAAAAAAAAADrH0Qy5GAzQNm0Ugjk6jJAfewuUFIANUAabVUS2WMzQLqGGRpPdDNAswdagSHOWMA7yOvBpL1YwB+94T5yZlbAUmNCzCXLWMAYtJCA0cxYwAAAAAAAAFlAAAAAAADAZkAAAAAAAFB0QAAAAAAAAFtAAAAAAAAAT0DhehSuKYsIQXE9Ctffy/dAj8L1KAJgBkGamZmZ4ZgJQR+F61Hgs+hAlIwFbnVtcHmUjAVkdHlwZZSTlIwCZjiUiYiHlFKUKEsDjAE8lE5OTkr/////Sv////9LAHSUYksESwWGlIwBQ5R0lFKUjAhidWlsdGluc5SMBXNsaWNllJOUSwJLBksBh5RSlIaUUpRoC2gOhZRSlChoDil9lGgSSwJzTnSUYowVbnVtcHkuY29yZS5tdWx0aWFycmF5lIwMX3JlY29uc3RydWN0lJOUaBiMB25kYXJyYXmUk5RLAIWUQwFilIeUUpQoSwFLAksFhpRoGowCTziUiYiHlFKUKEsDjAF8lE5OTkr/////Sv////9LP3SUYoldlCiMBWhvdXNllGg/aD+MCWFwYXJ0bWVudJRoQIwQRGlzdHJpdG8gRmVkZXJhbJSMB01vcmVsb3OUjAhZdWNhdMOhbpRoQWhBZXSUYmgmSwBLAksBh5RSlIaUUpSGlF2UKIwYcGFuZGFzLmNvcmUuaW5kZXhlcy5iYXNllIwKX25ld19JbmRleJSTlGhLjAVJbmRleJSTlH2UKIwEZGF0YZRoMWgzSwCFlGg1h5RSlChLAUsGhZRoO4ldlCiMDXByb3BlcnR5X3R5cGWUjAVzdGF0ZZSMA2xhdJSMA2xvbpSMB2FyZWFfbTKUjAlwcmljZV91c2SUZXSUYowEbmFtZZROdYaUUpRoTYwZcGFuZGFzLmNvcmUuaW5kZXhlcy5yYW5nZZSMClJhbmdlSW5kZXiUk5R9lChoXk6MBXN0YXJ0lEsAjARzdG9wlEsFjARzdGVwlEsBdYaUUpRlhpRSlIwEX3R5cJSMCWRhdGFmcmFtZZSMCV9tZXRhZGF0YZRdlIwFYXR0cnOUfZSMBl9mbGFnc5R9lIwXYWxsb3dzX2R1cGxpY2F0ZV9sYWJlbHOUiHN1Yi4='
  decoded_value = decode_value(encoded_value)
  assert type(decoded_value).__name__ == 'DataFrame'
  assert value.equals(decoded_value) == True

def test_sklearn_encoding():
  target = "price_usd"
  df = pd.read_csv(my_dir + "/fixtures/mexico-real-estate-train-sample.csv")
  X_train = df.drop(columns=target)
  y_train = df[target]
  value = make_pipeline(OneHotEncoder(use_cat_names=True), LinearRegression())
  value.fit(X_train, y_train)
  check_sklearn_model(value)
  check_sklearn_model(value)
  encoded_value = encode_value(value, 'sklearn_model')
  assert encoded_value['format'] == 'pickle'
  assert encoded_value['data'] == 'gASVNQIAAAAAAACMEHNrbGVhcm4ucGlwZWxpbmWUjAhQaXBlbGluZZSTlCmBlH2UKIwFc3RlcHOUXZQojA1vbmVob3RlbmNvZGVylIwZY2F0ZWdvcnlfZW5jb2RlcnMub25lX2hvdJSMDU9uZUhvdEVuY29kZXKUk5QpgZR9lCiMCXJldHVybl9kZpSIjA5kcm9wX2ludmFyaWFudJSJjAlkcm9wX2NvbHOUXZSMB21hcHBpbmeUXZQofZQojANjb2yUjA1wcm9wZXJ0eV90eXBllGgRjBFwYW5kYXMuY29yZS5mcmFtZZSMCURhdGFGcmFtZZSTlCmBlH2UKIwEX21ncpSMHnBhbmRhcy5jb3JlLmludGVybmFscy5tYW5hZ2Vyc5SMDEJsb2NrTWFuYWdlcpSTlIwJZnVuY3Rvb2xzlIwHcGFydGlhbJSTlIwccGFuZGFzLmNvcmUuaW50ZXJuYWxzLmJsb2Nrc5SMCW5ld19ibG9ja5STlIWUUpQoaCQpfZSMBG5kaW2USwJzTnSUYowTam9ibGliLm51bXB5X3BpY2tsZZSMEU51bXB5QXJyYXlXcmFwcGVylJOUKYGUfZQojAhzdWJjbGFzc5SMBW51bXB5lIwHbmRhcnJheZSTlIwFc2hhcGWUSwJLBIaUjAVvcmRlcpSMAUaUjAVkdHlwZZRoMGg3k5SMAmk4lImIh5RSlChLA4wBPJROTk5K/////0r/////SwB0lGKMCmFsbG93X21tYXCUiHViAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWtAAAAAAAAAIwIYnVpbHRpbnOUjAVzbGljZZSTlEsASwJLAYeUUpSGlFKUhZRdlCiMGHBhbmRhcy5jb3JlLmluZGV4ZXMuYmFzZZSMCl9uZXdfSW5kZXiUk5RoSIwFSW5kZXiUk5R9lCiMBGRhdGGUaCwpgZR9lChoL2gyaDNLAoWUaDWMAUOUaDdoOIwCTziUiYiHlFKUKEsDjAF8lE5OTkr/////Sv////9LP3SUYmg+iXVigAJjbnVtcHkuY29yZS5tdWx0aWFycmF5Cl9yZWNvbnN0cnVjdApxAGNudW1weQpuZGFycmF5CnEBSwCFcQJjX2NvZGVjcwplbmNvZGUK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CFJxCShLAUsEhXEKY251bXB5CmR0eXBlCnELWAIAAABPOHEMiYiHcQ1ScQ4oSwNYAQAAAHxxD05OTkr/////Sv////9LP3RxEGKJXXERKFgQAAAARGlzdHJpdG8gRmVkZXJhbHESWAcAAABNb3JlbG9zcRNYCAAAAFl1Y2F0w6FucRRHf/gAAAAAAABldHEVYi6VPAAAAAAAAABoWE51hpRSlGF9lGi3fZQoaLlozmi6XZR9lChovWgsKYGUfZQoaC9oMmgzSwSFlGg1aFJoN2g7aD6IdWIBAAAAAAAAAAIAAAAAAAAAAwAAAAAAAAD+/////////5X4AQAAAAAAAGjBaEFLAEsESwGHlFKUdWF1c3SUYmhmaMVoaGjGaGp9lGhsfZRobohzaFhOdWJoyWhVdWWMDmhhbmRsZV91bmtub3dulIwFdmFsdWWUjA5oYW5kbGVfbWlzc2luZ5Ro7YwEX2RpbZRLBYwNZmVhdHVyZV9uYW1lc5RdlChoFWhwjANsYXSUjANsb26UjAdhcmVhX20ylGV1YmjvSwVo7GjtaO5o7YwNdXNlX2NhdF9uYW1lc5SIaPBdlCiME3Byb3BlcnR5X3R5cGVfaG91c2WUjBdwcm9wZXJ0eV90eXBlX2FwYXJ0bWVudJSMFnN0YXRlX0Rpc3RyaXRvIEZlZGVyYWyUjA1zdGF0ZV9Nb3JlbG9zlIwOc3RhdGVfWXVjYXTDoW6UaPJo82j0ZXVihpSMEGxpbmVhcnJlZ3Jlc3Npb26UjBpza2xlYXJuLmxpbmVhcl9tb2RlbC5fYmFzZZSMEExpbmVhclJlZ3Jlc3Npb26Uk5QpgZR9lCiMDWZpdF9pbnRlcmNlcHSUiIwJbm9ybWFsaXpllIwKZGVwcmVjYXRlZJSMBmNvcHlfWJSIjAZuX2pvYnOUTowIcG9zaXRpdmWUiYwRZmVhdHVyZV9uYW1lc19pbl+UaCwpgZR9lChoL2gyaDNLCIWUaDVoUmg3aFVoPol1YoACY251bXB5LmNvcmUubXVsdGlhcnJheQpfcmVjb25zdHJ1Y3QKcQBjbnVtcHkKbmRhcnJheQpxAUsAhXECY19jb2RlY3MKZW5jb2RlCnEDWAEAAABicQRYBgAAAGxhdGluMXEFhnEGUnEHh3EIUnEJKEsBSwiFcQpjbnVtcHkKZHR5cGUKcQtYAgAAAE84cQyJiIdxDVJxDihLA1gBAAAAfHEPTk5OSv////9K/////0s/dHEQYoldcREoWBMAAABwcm9wZXJ0eV90eXBlX2hvdXNlcRJYFwAAAHByb3BlcnR5X3R5cGVfYXBhcnRtZW50cRNYFgAAAHN0YXRlX0Rpc3RyaXRvIEZlZGVyYWxxFFgNAAAAc3RhdGVfTW9yZWxvc3EVWA4AAABzdGF0ZV9ZdWNhdMOhbnEWWAMAAABsYXRxF1gDAAAAbG9ucRhYBwAAAGFyZWFfbTJxGWV0cRpiLpVcAAAAAAAAAIwObl9mZWF0dXJlc19pbl+USwiMBWNvZWZflGgsKYGUfZQoaC9oMmgzSwiFlGg1aFJoN2g4jAJmOJSJiIeUUpQoSwNoPE5OTkr/////Sv////9LAHSUYmg+iHVi9lXLHJSpwED7SMsclKnAwDKOGvJ5zAVBcIvswPZOBcH6roBLzGCvwJVGNwAYn+lAcPy9AP1j8sC4krBQo+2rQJUuAAAAAAAAAIwJX3Jlc2lkdWVzlGgsKYGUfZQoaC9oMmgzSwCFlGg1aFJoN2oUAQAAaD6IdWKVOAAAAAAAAACMBXJhbmtflEsEjAlzaW5ndWxhcl+UaCwpgZR9lChoL2gyaDNLBYWUaDVoUmg3ahQBAABoPoh1YtI4iDMAGGpAHj+MnFu9DUAXDxM2cgTxPxhG1AWlCOA/rjCcvfVdET2VfAAAAAAAAACMCmludGVyY2VwdF+UjBVudW1weS5jb3JlLm11bHRpYXJyYXmUjAZzY2FsYXKUk5RqFAEAAEMItQxE2bLZYMGUhpRSlIwQX3NrbGVhcm5fdmVyc2lvbpSMAzEuMJR1YoaUZYwGbWVtb3J5lE5okIlqJgEAAGonAQAAdWIu'
  decoded_value = decode_value(encoded_value)
  assert type(decoded_value).__name__ == 'Pipeline'
  check_sklearn_model(decoded_value)

def test_file_encoding():
  with open(my_dir + '/fixtures/plot.png', 'rb') as value:
    original_value = value.read()
    value.seek(0)
    encoded_value = encode_value(value, 'file')
    assert encoded_value['format'] == 'binary'
    decoded_value = decode_value(encoded_value)
    assert decoded_value.read() == original_value

def test_submission_encoding():
  df = pd.read_csv(my_dir + "/fixtures/mexico-real-estate-train-sample.csv")
  submission = {
    'type': 'object',
    'object': {
      'df': df,
      'multiplier': 10.76
    }
  }
  encoded_submission = encode_submission(submission)
  assert encoded_submission['type'] == 'object'
  assert encoded_submission['object']['df']['type'] == 'pandas_dataframe'
  assert encoded_submission['object']['multiplier']['type'] == 'float'
  decoded_submission = decode_submission(encoded_submission)
  assert decoded_submission['type'] == 'object'
  assert type(decoded_submission['object']['df']).__name__ == 'DataFrame'
  assert type(decoded_submission['object']['multiplier']).__name__ == 'float'
  assert decoded_submission['object']['df'].equals(df) == True

